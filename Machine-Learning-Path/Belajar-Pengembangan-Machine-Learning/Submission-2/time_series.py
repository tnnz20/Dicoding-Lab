# -*- coding: utf-8 -*-
"""Submission Time Series2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1iFPnzfgxbBObQRBRik_oPZlsCaN_DD84

# **Data Diri**

---
(Peserta Kampus merdeka - Student Indepentdent)


Nama : Gusti Muhammad Aulia Nur Sulthan

Alamat :  Kabupaten Hulu Sungai Selatan, Kalimantan Selatan

SIB Id : M247R6216

SIB Email : M247R6216@dicoding.org	

SIB Group : M3

# **Import Library dan Dataset**
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

from keras.layers import Dense, LSTM
from sklearn.preprocessing import MinMaxScaler
import tensorflow as tf

"""Sumber : [dataset](https://www.kaggle.com/aayushmishra1512/netflix-stock-data)"""

df = pd.read_csv('NFLX.csv')
df.head()

# Total data
df.shape

# Check data
df.isnull().sum()

# Bagi data train dan validation
df_train = df[1:3601]
df_val = df[3602:4002]

plt.figure(figsize=(15,5))
plt.plot(df_train.index, df_train['Open'])
plt.plot(df_val.index, df_val['Open'])
plt.title('Opening Price Netflix',
          fontsize=30);

"""Bagi data *Training* dan *Validation*"""

T_date = df_train['Date']
T_price = df_train['Open'].values

V_date = df_val['Date'].values
V_price = df_val['Open'].values

# reshape matrix
T_price_r = T_price.reshape(-1,1)
V_price_r = T_price.reshape(-1,1)

scaler = MinMaxScaler()
T_price_r_s = scaler.fit_transform(T_price_r)
V_price_r_s = scaler.fit_transform(T_price_r)

def windowed_dataset(series, window_size, batch_size, shuffle_buffer):
    ds = tf.data.Dataset.from_tensor_slices(series)
    ds = ds.window(window_size + 1, shift=1, drop_remainder=True)
    ds = ds.flat_map(lambda w: w.batch(window_size + 1))
    ds = ds.shuffle(shuffle_buffer)
    ds = ds.map(lambda w: (w[:-1], w[-1:]))
    return ds.batch(batch_size).prefetch(1)

"""# **LSTM Model**"""

data_x_train = windowed_dataset(T_price_r_s, window_size=60, batch_size=68, shuffle_buffer=1000)
data_x_test = windowed_dataset(V_price_r_s, window_size=60, batch_size=68, shuffle_buffer=1000)

model = tf.keras.models.Sequential([
  tf.keras.layers.LSTM(128, return_sequences=True), 
  tf.keras.layers.LSTM(64, return_sequences=True),
  tf.keras.layers.LSTM(64, return_sequences=True),
    
  tf.keras.layers.Dense(60, activation="relu"),
  tf.keras.layers.Dense(30, activation="relu"),
  tf.keras.layers.Dense(10, activation="relu"),
  tf.keras.layers.Dense(1),
  tf.keras.layers.Lambda(lambda x: x * 400)
])

lr_schedule = tf.keras.callbacks.LearningRateScheduler(
    lambda epoch: 1e-8 * 10**(epoch / 20))
optimizer = tf.keras.optimizers.Adam(learning_rate=1e-8)

model.compile(loss=tf.keras.losses.Huber(),
              optimizer=optimizer,
              metrics=["mae"])

hist = model.fit(data_x_train ,epochs=65, validation_data=data_x_test, callbacks=[lr_schedule])

"""**Plot MAE dan Loss**"""

# plot MAE

plt.plot(hist.history['mae'])
plt.plot(hist.history['val_mae'])
plt.title('MAE')
plt.ylabel('mae')
plt.xlabel('epoch')
plt.legend(['train','val'])
plt.show()

# plot loss

plt.plot(hist.history['loss'])
plt.plot(hist.history['val_loss'])
plt.title('Model Loss')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(['train','val'])
plt.show()